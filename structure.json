{
  "src": {
    "config": {
      "auth.js": "const jwt = require('jsonwebtoken');\r\nrequire('dotenv').config();\r\n\r\nmodule.exports = {\r\n  verifyToken: (token) => {\r\n    try {\r\n      return jwt.verify(token, process.env.JWT_SECRET);\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n  }\r\n};",
      "database.js": "const mysql = require('mysql2/promise');\r\nrequire('dotenv').config();\r\n\r\nconst pool = mysql.createPool({\r\n  host: process.env.DB_HOST,\r\n  user: process.env.DB_USER,\r\n  password: process.env.DB_PASSWORD,\r\n  database: process.env.DB_NAME,\r\n  waitForConnections: true,\r\n  connectionLimit: 10,\r\n  queueLimit: 0\r\n});\r\n\r\nmodule.exports = pool;"
    },
    "controllers": {
      "carrito.controller.js": "const Carrito = require('../models/carrito.model');\r\nconst ItemCarrito = require('../models/itemCarrito.model');\r\nconst ProductosService = require('../services/productos.service');\r\n\r\nexports.getCarritoActivo = async (req, res) => {\r\n  try {\r\n    const usuarioId = req.user.id;\r\n    \r\n    // Obtener carrito activo o crear uno nuevo\r\n    let carrito = await Carrito.getActiveByUserId(usuarioId);\r\n    \r\n    if (!carrito) {\r\n      const nuevoCarritoId = await Carrito.create(usuarioId);\r\n      carrito = await Carrito.getById(nuevoCarritoId);\r\n    }\r\n    \r\n    // Obtener los items del carrito\r\n    const items = await ItemCarrito.getAllByCartId(carrito.id);\r\n    \r\n    // Obtener información detallada de los productos\r\n    const itemsConDetalles = await Promise.all(items.map(async (item) => {\r\n      const productoDetalle = await ProductosService.getProductDetails(item.producto_id);\r\n      return {\r\n        ...item,\r\n        producto: productoDetalle\r\n      };\r\n    }));\r\n    \r\n    res.status(200).json({\r\n      carrito,\r\n      items: itemsConDetalles\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al obtener el carrito' });\r\n  }\r\n};\r\n\r\nexports.getAllCarritos = async (req, res) => {\r\n  try {\r\n    const usuarioId = req.user.id;\r\n    \r\n    const carritos = await Carrito.getAllByUserId(usuarioId);\r\n    \r\n    res.status(200).json(carritos);\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al obtener los carritos' });\r\n  }\r\n};\r\n\r\nexports.getCarritoById = async (req, res) => {\r\n  try {\r\n    const carritoId = req.params.id;\r\n    const usuarioId = req.user.id;\r\n    \r\n    const carrito = await Carrito.getById(carritoId);\r\n    \r\n    if (!carrito) {\r\n      return res.status(404).json({ message: 'Carrito no encontrado' });\r\n    }\r\n    \r\n    // Verificar que el carrito pertenezca al usuario\r\n    if (carrito.usuario_id !== usuarioId) {\r\n      return res.status(403).json({ message: 'No tienes permiso para acceder a este carrito' });\r\n    }\r\n    \r\n    // Obtener los items del carrito\r\n    const items = await ItemCarrito.getAllByCartId(carritoId);\r\n    \r\n    // Obtener información detallada de los productos\r\n    const itemsConDetalles = await Promise.all(items.map(async (item) => {\r\n      const productoDetalle = await ProductosService.getProductDetails(item.producto_id);\r\n      return {\r\n        ...item,\r\n        producto: productoDetalle\r\n      };\r\n    }));\r\n    \r\n    res.status(200).json({\r\n      carrito,\r\n      items: itemsConDetalles\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al obtener el carrito' });\r\n  }\r\n};\r\n\r\nexports.vaciarCarrito = async (req, res) => {\r\n  try {\r\n    const carritoId = req.params.id;\r\n    const usuarioId = req.user.id;\r\n    \r\n    const carrito = await Carrito.getById(carritoId);\r\n    \r\n    if (!carrito) {\r\n      return res.status(404).json({ message: 'Carrito no encontrado' });\r\n    }\r\n    \r\n    // Verificar que el carrito pertenezca al usuario\r\n    if (carrito.usuario_id !== usuarioId) {\r\n      return res.status(403).json({ message: 'No tienes permiso para modificar este carrito' });\r\n    }\r\n    \r\n    await ItemCarrito.removeAllFromCart(carritoId);\r\n    \r\n    // Actualizar el total a 0\r\n    await Carrito.updateTotal(carritoId, 0);\r\n    \r\n    res.status(200).json({ message: 'Carrito vaciado exitosamente' });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al vaciar el carrito' });\r\n  }\r\n};\r\n\r\nexports.abandonarCarrito = async (req, res) => {\r\n  try {\r\n    const carritoId = req.params.id;\r\n    const usuarioId = req.user.id;\r\n    \r\n    const carrito = await Carrito.getById(carritoId);\r\n    \r\n    if (!carrito) {\r\n      return res.status(404).json({ message: 'Carrito no encontrado' });\r\n    }\r\n    \r\n    // Verificar que el carrito pertenezca al usuario\r\n    if (carrito.usuario_id !== usuarioId) {\r\n      return res.status(403).json({ message: 'No tienes permiso para modificar este carrito' });\r\n    }\r\n    \r\n    // Cambiar estado a abandonado\r\n    await Carrito.updateStatus(carritoId, 'abandonado');\r\n    \r\n    // Crear un nuevo carrito activo\r\n    await Carrito.create(usuarioId);\r\n    \r\n    res.status(200).json({ message: 'Carrito abandonado exitosamente' });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al abandonar el carrito' });\r\n  }\r\n};\r\n\r\nexports.procesarCarrito = async (req, res) => {\r\n  try {\r\n    const carritoId = req.params.id;\r\n    const usuarioId = req.user.id;\r\n    \r\n    const carrito = await Carrito.getById(carritoId);\r\n    \r\n    if (!carrito) {\r\n      return res.status(404).json({ message: 'Carrito no encontrado' });\r\n    }\r\n    \r\n    // Verificar que el carrito pertenezca al usuario\r\n    if (carrito.usuario_id !== usuarioId) {\r\n      return res.status(403).json({ message: 'No tienes permiso para procesar este carrito' });\r\n    }\r\n    \r\n    if (carrito.estado !== 'activo') {\r\n      return res.status(400).json({ message: 'Solo se pueden procesar carritos activos' });\r\n    }\r\n    \r\n    // Verificar stock de todos los productos\r\n    const items = await ItemCarrito.getAllByCartId(carritoId);\r\n    \r\n    if (items.length === 0) {\r\n      return res.status(400).json({ message: 'El carrito está vacío' });\r\n    }\r\n    \r\n    // Verificar stock disponible\r\n    for (const item of items) {\r\n      const stockInfo = await ProductosService.checkStock(item.producto_id, item.cantidad);\r\n      \r\n      if (!stockInfo.disponible) {\r\n        return res.status(400).json({ \r\n          message: `Stock insuficiente para el producto ${item.producto_id}`,\r\n          stockActual: stockInfo.stock,\r\n          cantidadSolicitada: item.cantidad\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Actualizar stock de los productos\r\n    for (const item of items) {\r\n      const updateResult = await ProductosService.updateStock(item.producto_id, item.cantidad);\r\n      if (!updateResult) {\r\n        console.error(`Error al actualizar stock del producto ${item.producto_id}`);\r\n      }\r\n    }\r\n    \r\n    // Cambiar estado a procesado\r\n    await Carrito.updateStatus(carritoId, 'procesado');\r\n    \r\n    // Crear un nuevo carrito activo\r\n    const nuevoCarritoId = await Carrito.create(usuarioId);\r\n    \r\n    res.status(200).json({ \r\n      message: 'Carrito procesado exitosamente',\r\n      carritoId: carritoId,\r\n      nuevoCarritoId: nuevoCarritoId\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al procesar el carrito' });\r\n  }\r\n};",
      "itemCarrito.controller.js": "const Carrito = require('../models/carrito.model');\r\nconst ItemCarrito = require('../models/itemCarrito.model');\r\nconst ProductosService = require('../services/productos.service');\r\n\r\nexports.agregarItem = async (req, res) => {\r\n  try {\r\n    const { producto_id, cantidad } = req.body;\r\n    const usuarioId = req.user.id;\r\n    \r\n    if (!producto_id || !cantidad || cantidad <= 0) {\r\n      return res.status(400).json({ message: 'ID de producto y cantidad positiva son requeridos' });\r\n    }\r\n    \r\n    // Verificar si el producto existe y tiene stock disponible\r\n    const stockInfo = await ProductosService.checkStock(producto_id, cantidad);\r\n    \r\n    if (!stockInfo.disponible) {\r\n      return res.status(400).json({ \r\n        message: 'Stock insuficiente',\r\n        stockActual: stockInfo.stock || 0,\r\n        cantidadSolicitada: cantidad\r\n      });\r\n    }\r\n    \r\n    // Obtener carrito activo o crear uno nuevo\r\n    let carrito = await Carrito.getActiveByUserId(usuarioId);\r\n    \r\n    if (!carrito) {\r\n      const nuevoCarritoId = await Carrito.create(usuarioId);\r\n      carrito = await Carrito.getById(nuevoCarritoId);\r\n    }\r\n    \r\n    // Agregar item al carrito\r\n    await ItemCarrito.add(carrito.id, producto_id, cantidad, stockInfo.precio);\r\n    \r\n    // Recalcular el total del carrito\r\n    const total = await Carrito.calculateTotal(carrito.id);\r\n    await Carrito.updateTotal(carrito.id, total);\r\n    \r\n    // Obtener carrito actualizado con items\r\n    const carritoActualizado = await Carrito.getById(carrito.id);\r\n    const items = await ItemCarrito.getAllByCartId(carrito.id);\r\n    \r\n    res.status(200).json({\r\n      message: 'Producto agregado al carrito exitosamente',\r\n      carrito: carritoActualizado,\r\n      items: items\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al agregar item al carrito' });\r\n  }\r\n};\r\n\r\nexports.actualizarCantidad = async (req, res) => {\r\n  try {\r\n    const itemId = req.params.id;\r\n    const { cantidad } = req.body;\r\n    const usuarioId = req.user.id;\r\n    \r\n    if (!cantidad || cantidad <= 0) {\r\n      return res.status(400).json({ message: 'La cantidad debe ser positiva' });\r\n    }\r\n    \r\n    // Obtener el item\r\n    const item = await ItemCarrito.getById(itemId);\r\n    \r\n    if (!item) {\r\n      return res.status(404).json({ message: 'Item no encontrado' });\r\n    }\r\n    \r\n    // Verificar que el carrito pertenezca al usuario\r\n    const carrito = await Carrito.getById(item.carrito_id);\r\n    \r\n    if (!carrito || carrito.usuario_id !== usuarioId) {\r\n      return res.status(403).json({ message: 'No tienes permiso para modificar este item' });\r\n    }\r\n    \r\n    // Verificar stock disponible\r\n    const stockInfo = await ProductosService.checkStock(item.producto_id, cantidad);\r\n    \r\n    if (!stockInfo.disponible) {\r\n      return res.status(400).json({ \r\n        message: 'Stock insuficiente',\r\n        stockActual: stockInfo.stock,\r\n        cantidadSolicitada: cantidad\r\n      });\r\n    }\r\n    \r\n    // Actualizar cantidad\r\n    await ItemCarrito.updateQuantity(itemId, cantidad, item.precio_unitario);\r\n    \r\n    // Recalcular el total del carrito\r\n    const total = await Carrito.calculateTotal(carrito.id);\r\n    await Carrito.updateTotal(carrito.id, total);\r\n    \r\n    // Obtener carrito actualizado con items\r\n    const carritoActualizado = await Carrito.getById(carrito.id);\r\n    const items = await ItemCarrito.getAllByCartId(carrito.id);\r\n    \r\n    res.status(200).json({\r\n      message: 'Cantidad actualizada exitosamente',\r\n      carrito: carritoActualizado,\r\n      items: items\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al actualizar cantidad' });\r\n  }\r\n};\r\n\r\nexports.eliminarItem = async (req, res) => {\r\n  try {\r\n    const itemId = req.params.id;\r\n    const usuarioId = req.user.id;\r\n    \r\n    // Obtener el item\r\n    const item = await ItemCarrito.getById(itemId);\r\n    \r\n    if (!item) {\r\n      return res.status(404).json({ message: 'Item no encontrado' });\r\n    }\r\n    \r\n    // Verificar que el carrito pertenezca al usuario\r\n    const carrito = await Carrito.getById(item.carrito_id);\r\n    \r\n    if (!carrito || carrito.usuario_id !== usuarioId) {\r\n      return res.status(403).json({ message: 'No tienes permiso para eliminar este item' });\r\n    }\r\n    \r\n    // Eliminar el item\r\n    await ItemCarrito.remove(itemId);\r\n    \r\n    // Recalcular el total del carrito\r\n    const total = await Carrito.calculateTotal(carrito.id);\r\n    await Carrito.updateTotal(carrito.id, total);\r\n    \r\n    // Obtener carrito actualizado con items\r\n    const carritoActualizado = await Carrito.getById(carrito.id);\r\n    const items = await ItemCarrito.getAllByCartId(carrito.id);\r\n    \r\n    res.status(200).json({\r\n      message: 'Item eliminado exitosamente',\r\n      carrito: carritoActualizado,\r\n      items: items\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error al eliminar item' });\r\n  }\r\n};"
    },
    "index.js": "const express = require('express');\r\nconst cors = require('cors');\r\nrequire('dotenv').config();\r\n\r\nconst app = express();\r\nconst port = process.env.PORT || 3004;\r\n\r\n// Middlewares\r\napp.use(cors());\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: true }));\r\n\r\n// Ruta básica\r\napp.get('/', (req, res) => {\r\n  res.json({ \r\n    message: 'API de Carrito funcionando correctamente',\r\n    version: '1.0.0'\r\n  });\r\n});\r\n\r\n// Importar rutas\r\nconst authRoutes = require('./routes/auth.routes');\r\nconst carritoRoutes = require('./routes/carrito.routes');\r\nconst itemCarritoRoutes = require('./routes/itemCarrito.routes');\r\n\r\n// Usar rutas\r\napp.use('/api/auth', authRoutes); // Esta ruta NO requiere autenticación\r\napp.use('/api/carrito', carritoRoutes);\r\napp.use('/api/items', itemCarritoRoutes);\r\n\r\n// Middleware para manejo de errores 404\r\napp.use((req, res) => {\r\n  res.status(404).json({ message: 'Ruta no encontrada' });\r\n});\r\n\r\n// Iniciar servidor\r\napp.listen(port, () => {\r\n  console.log(`Servidor de Carrito corriendo en http://localhost:${port}`);\r\n});",
    "middleware": {
      "auth.middleware.js": "const authConfig = require('../config/auth');\r\nrequire('dotenv').config();\r\n\r\nexports.verificarToken = async (req, res, next) => {\r\n  try {\r\n    // Obtener el token del header\r\n    const authHeader = req.headers.authorization;\r\n    \r\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n      return res.status(401).json({ message: 'Token no proporcionado' });\r\n    }\r\n    \r\n    const token = authHeader.split(' ')[1];\r\n    \r\n    // Verificar el token\r\n    const decoded = authConfig.verifyToken(token);\r\n    \r\n    if (!decoded) {\r\n      return res.status(401).json({ message: 'Token inválido o expirado' });\r\n    }\r\n    \r\n    // Agregar información del usuario al request\r\n    req.user = {\r\n      id: decoded.id,\r\n      email: decoded.email,\r\n      rol_id: decoded.rol_id\r\n    };\r\n    \r\n    next();\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Error en la autenticación' });\r\n  }\r\n};\r\n\r\nexports.esAdmin = (req, res, next) => {\r\n  if (req.user.rol_id !== 1) { // 1 = admin\r\n    return res.status(403).json({ message: 'Acceso denegado: Se requiere rol de administrador' });\r\n  }\r\n  \r\n  next();\r\n};\r\n\r\nexports.tieneRol = (roles) => {\r\n  return (req, res, next) => {\r\n    if (!roles.includes(req.user.rol_id)) {\r\n      return res.status(403).json({ message: 'Acceso denegado: No tienes los permisos necesarios' });\r\n    }\r\n    \r\n    next();\r\n  };\r\n};",
      "roles.middleware.js": "exports.esAdmin = (req, res, next) => {\r\n  if (req.user.rol_id !== 1) { // 1 = admin\r\n    return res.status(403).json({ message: 'Acceso denegado: Se requiere rol de administrador' });\r\n  }\r\n  \r\n  next();\r\n};\r\n\r\nexports.tieneRol = (roles) => {\r\n  return (req, res, next) => {\r\n    if (!roles.includes(req.user.rol_id)) {\r\n      return res.status(403).json({ message: 'Acceso denegado: No tienes los permisos necesarios' });\r\n    }\r\n    \r\n    next();\r\n  };\r\n};"
    },
    "models": {
      "carrito.model.js": "const pool = require('../config/database');\r\n\r\nclass Carrito {\r\n  // Obtener el carrito activo del usuario\r\n  static async getActiveByUserId(usuarioId) {\r\n    const [rows] = await pool.query(\r\n      `SELECT * FROM carritos \r\n      WHERE usuario_id = ? AND estado = 'activo'\r\n      ORDER BY created_at DESC LIMIT 1`,\r\n      [usuarioId]\r\n    );\r\n    \r\n    return rows.length ? rows[0] : null;\r\n  }\r\n  \r\n  // Crear un nuevo carrito\r\n  static async create(usuarioId) {\r\n    const [result] = await pool.query(\r\n      `INSERT INTO carritos (usuario_id, estado)\r\n      VALUES (?, 'activo')`,\r\n      [usuarioId]\r\n    );\r\n    \r\n    return result.insertId;\r\n  }\r\n  \r\n  // Actualizar el total del carrito\r\n  static async updateTotal(id, total) {\r\n    const [result] = await pool.query(\r\n      `UPDATE carritos SET total = ? WHERE id = ?`,\r\n      [total, id]\r\n    );\r\n    \r\n    return result.affectedRows > 0;\r\n  }\r\n  \r\n  // Cambiar el estado del carrito\r\n  static async updateStatus(id, estado) {\r\n    const [result] = await pool.query(\r\n      `UPDATE carritos SET estado = ? WHERE id = ?`,\r\n      [estado, id]\r\n    );\r\n    \r\n    return result.affectedRows > 0;\r\n  }\r\n  \r\n  // Obtener todos los carritos de un usuario\r\n  static async getAllByUserId(usuarioId) {\r\n    const [rows] = await pool.query(\r\n      `SELECT * FROM carritos WHERE usuario_id = ? ORDER BY created_at DESC`,\r\n      [usuarioId]\r\n    );\r\n    \r\n    return rows;\r\n  }\r\n  \r\n  // Obtener un carrito por ID\r\n  static async getById(id) {\r\n    const [rows] = await pool.query(\r\n      `SELECT * FROM carritos WHERE id = ?`,\r\n      [id]\r\n    );\r\n    \r\n    return rows.length ? rows[0] : null;\r\n  }\r\n  \r\n  // Eliminar un carrito\r\n  static async delete(id) {\r\n    const [result] = await pool.query(\r\n      `DELETE FROM carritos WHERE id = ?`,\r\n      [id]\r\n    );\r\n    \r\n    return result.affectedRows > 0;\r\n  }\r\n  \r\n  // Calcular total de un carrito\r\n  static async calculateTotal(carritoId) {\r\n    const [rows] = await pool.query(\r\n      `SELECT SUM(subtotal) as total FROM items_carrito \r\n      WHERE carrito_id = ?`,\r\n      [carritoId]\r\n    );\r\n    \r\n    return rows[0].total || 0;\r\n  }\r\n}\r\n\r\nmodule.exports = Carrito;",
      "itemCarrito.model.js": "const pool = require('../config/database');\r\n\r\nclass ItemCarrito {\r\n  // Agregar un item al carrito\r\n  static async add(carritoId, productoId, cantidad, precioUnitario) {\r\n    // Verificar si el producto ya existe en el carrito\r\n    const [existente] = await pool.query(\r\n      `SELECT * FROM items_carrito \r\n      WHERE carrito_id = ? AND producto_id = ?`,\r\n      [carritoId, productoId]\r\n    );\r\n    \r\n    // Calcular subtotal\r\n    const subtotal = cantidad * precioUnitario;\r\n    \r\n    if (existente.length > 0) {\r\n      // Actualizar cantidad y subtotal del item existente\r\n      const nuevaCantidad = existente[0].cantidad + cantidad;\r\n      const nuevoSubtotal = nuevaCantidad * precioUnitario;\r\n      \r\n      const [result] = await pool.query(\r\n        `UPDATE items_carrito \r\n        SET cantidad = ?, subtotal = ? \r\n        WHERE carrito_id = ? AND producto_id = ?`,\r\n        [nuevaCantidad, nuevoSubtotal, carritoId, productoId]\r\n      );\r\n      \r\n      return existente[0].id;\r\n    } else {\r\n      // Crear nuevo item\r\n      const [result] = await pool.query(\r\n        `INSERT INTO items_carrito \r\n        (carrito_id, producto_id, cantidad, precio_unitario, subtotal)\r\n        VALUES (?, ?, ?, ?, ?)`,\r\n        [carritoId, productoId, cantidad, precioUnitario, subtotal]\r\n      );\r\n      \r\n      return result.insertId;\r\n    }\r\n  }\r\n  \r\n  // Actualizar cantidad de un item\r\n  static async updateQuantity(id, cantidad, precioUnitario) {\r\n    const subtotal = cantidad * precioUnitario;\r\n    \r\n    const [result] = await pool.query(\r\n      `UPDATE items_carrito \r\n      SET cantidad = ?, subtotal = ? \r\n      WHERE id = ?`,\r\n      [cantidad, subtotal, id]\r\n    );\r\n    \r\n    return result.affectedRows > 0;\r\n  }\r\n  \r\n  // Eliminar un item del carrito\r\n  static async remove(id) {\r\n    const [result] = await pool.query(\r\n      `DELETE FROM items_carrito WHERE id = ?`,\r\n      [id]\r\n    );\r\n    \r\n    return result.affectedRows > 0;\r\n  }\r\n  \r\n  // Obtener todos los items de un carrito\r\n  static async getAllByCartId(carritoId) {\r\n    const [rows] = await pool.query(\r\n      `SELECT * FROM items_carrito WHERE carrito_id = ?`,\r\n      [carritoId]\r\n    );\r\n    \r\n    return rows;\r\n  }\r\n  \r\n  // Obtener un item por ID\r\n  static async getById(id) {\r\n    const [rows] = await pool.query(\r\n      `SELECT * FROM items_carrito WHERE id = ?`,\r\n      [id]\r\n    );\r\n    \r\n    return rows.length ? rows[0] : null;\r\n  }\r\n  \r\n  // Eliminar todos los items de un carrito\r\n  static async removeAllFromCart(carritoId) {\r\n    const [result] = await pool.query(\r\n      `DELETE FROM items_carrito WHERE carrito_id = ?`,\r\n      [carritoId]\r\n    );\r\n    \r\n    return result.affectedRows > 0;\r\n  }\r\n}\r\n\r\nmodule.exports = ItemCarrito;"
    },
    "routes": {
      "auth.routes.js": "const express = require('express');\r\nconst router = express.Router();\r\nconst jwt = require('jsonwebtoken');\r\nrequire('dotenv').config();\r\n\r\n// Endpoint para generar token de prueba\r\nrouter.post('/test-token', (req, res) => {\r\n  try {\r\n    const payload = {\r\n      id: 1,\r\n      email: 'test@example.com',\r\n      rol_id: 1\r\n    };\r\n    \r\n    const token = jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: '24h' });\r\n    \r\n    res.status(200).json({ \r\n      message: 'Token de prueba generado exitosamente',\r\n      token\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al generar token:', error);\r\n    res.status(500).json({ message: 'Error al generar token' });\r\n  }\r\n});\r\n\r\nmodule.exports = router;",
      "carrito.routes.js": "const express = require('express');\r\nconst router = express.Router();\r\nconst carritoController = require('../controllers/carrito.controller');\r\nconst authMiddleware = require('../middleware/auth.middleware');\r\n\r\n// Todas las rutas requieren autenticación\r\nrouter.use(authMiddleware.verificarToken);\r\n\r\n// Rutas de carrito\r\nrouter.get('/activo', carritoController.getCarritoActivo);\r\nrouter.get('/', carritoController.getAllCarritos);\r\nrouter.get('/:id', carritoController.getCarritoById);\r\nrouter.post('/:id/vaciar', carritoController.vaciarCarrito);\r\nrouter.post('/:id/abandonar', carritoController.abandonarCarrito);\r\nrouter.post('/:id/procesar', carritoController.procesarCarrito);\r\n\r\nmodule.exports = router;",
      "itemCarrito.routes.js": "const express = require('express');\r\nconst router = express.Router();\r\nconst itemCarritoController = require('../controllers/itemCarrito.controller');\r\nconst authMiddleware = require('../middleware/auth.middleware');\r\n\r\n// Todas las rutas requieren autenticación\r\nrouter.use(authMiddleware.verificarToken);\r\n\r\n// Rutas de items de carrito\r\nrouter.post('/', itemCarritoController.agregarItem);\r\nrouter.put('/:id', itemCarritoController.actualizarCantidad);\r\nrouter.delete('/:id', itemCarritoController.eliminarItem);\r\n\r\nmodule.exports = router;"
    },
    "services": {
      "productos.service.js": "const axios = require('axios');\r\nrequire('dotenv').config();\r\n\r\n// URL base de la API de productos\r\nconst API_URL = process.env.API_PRODUCTOS_URL;\r\n\r\nclass ProductosService {\r\n  // Verificar si un producto existe y obtener su precio\r\n  static async getProductDetails(productoId) {\r\n    try {\r\n      const response = await axios.get(`${API_URL}/productos/${productoId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error al obtener detalles del producto:', error.message);\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  // Verificar stock disponible\r\n  static async checkStock(productoId, cantidad) {\r\n    try {\r\n      // Usar el nuevo endpoint dedicado\r\n      const response = await axios.post(`${API_URL}/productos/check-stock`, {\r\n        producto_id: productoId,\r\n        cantidad\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error al verificar stock:', error.message);\r\n      \r\n      // Alternativa: usar método antiguo si el endpoint falla\r\n      try {\r\n        const producto = await this.getProductDetails(productoId);\r\n        if (!producto) {\r\n          return {\r\n            disponible: false,\r\n            mensaje: 'Producto no encontrado',\r\n            stock: 0\r\n          };\r\n        }\r\n        \r\n        return {\r\n          disponible: producto.stock >= cantidad,\r\n          stock: producto.stock,\r\n          precio: producto.precio\r\n        };\r\n      } catch (innerError) {\r\n        console.error('Error secundario al verificar stock:', innerError.message);\r\n        return {\r\n          disponible: false,\r\n          mensaje: 'Error al verificar disponibilidad',\r\n          stock: 0\r\n        };\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Actualizar stock (reducir)\r\n  static async updateStock(productoId, cantidad) {\r\n    try {\r\n      await axios.post(`${API_URL}/productos/update-stock`, {\r\n        producto_id: productoId,\r\n        cantidad\r\n      });\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error al actualizar stock:', error.message);\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  // Restaurar stock (aumentar)\r\n  static async restoreStock(productoId, cantidad) {\r\n    try {\r\n      await axios.post(`${API_URL}/productos/restore-stock`, {\r\n        producto_id: productoId,\r\n        cantidad\r\n      });\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error al restaurar stock:', error.message);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = ProductosService;"
    }
  }
}